# -*- coding: utf-8 -*-
"""Python_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1shA4aTrYhK-RtZnhAwkzDB6paOFPBY3n
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Veri setini yükleme
train_df = pd.read_csv('./train.csv')
test_df = pd.read_csv('./test.csv')

# Veri setlerini birleştirme (EDA için)
df = pd.concat([train_df, test_df], ignore_index=True)

# Veri ön işleme
# Eksik değerleri doldurma
df['Arrival Delay in Minutes'].fillna(df['Arrival Delay in Minutes'].mean(), inplace=True)

# Kategorik değişkenleri sayısal formata dönüştürme
# 'satisfaction' sütunu hariç tüm object (string) tipindeki sütunları one-hot encode edin.
for column in df.select_dtypes(include=['object']).columns:
    if column != 'satisfaction':  # 'satisfaction' sütununu atla
        df = pd.get_dummies(df, columns=[column], drop_first=True)

# Model Oluşturma
# Train ve test setlerini ayırma
train = df.iloc[:len(train_df), :]
test = df.iloc[len(train_df):, :]

# Model için özellikler ve hedef değişkeni seçme
X_train = train.drop(['satisfaction'], axis=1)
y_train = train['satisfaction']

# Gradient Boosting Classifier modeli oluşturma
gbm = GradientBoostingClassifier(random_state=42)

# Veri setini train ve validation setlere ayırma
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Modeli eğitme
gbm.fit(X_train, y_train)

# Modelin değerlendirilmesi
y_pred = gbm.predict(X_val)

# Performans metrikleri
print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))
print("Accuracy:", accuracy_score(y_val, y_pred))

# Parametre ayarı ve sonuçların karşılaştırılması
# Örneğin, learning rate ve max_depth parametrelerini değiştirme
params = {'learning_rate': [0.1, 0.05],
          'max_depth': [3, 5]}

grid_search = GridSearchCV(estimator=gbm, param_grid=params, cv=3, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Örnek görselleştirme: 'Age' özelliğinin 'satisfaction' sınıfları üzerindeki dağılımı
plt.figure(figsize=(10, 6))
sns.histplot(data=train_df, x='Age', hue='satisfaction', kde=True)
plt.title('Distribution of Age by Satisfaction')
plt.xlabel('Age')
plt.ylabel('Count')
plt.legend(title='Satisfaction', labels=['Neutral or Dissatisfied', 'Satisfied'])
plt.show()